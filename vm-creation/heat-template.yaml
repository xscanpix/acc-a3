heat_template_version: 2015-10-15

description: Hot Template to start a stack

parameters:
  os_auth_url:
    type: string
    default: https://uppmax.cloud.snic.se:5000/v3
  os_username:
    type: string
    default: s11784
  os_region_name:
    type: string
    default: UPPMAX
  os_project_name:
    type: string
    default: SNIC\ 2018/10-30
  os_user_domain_name:
    type: string
    default: snic
  os_identity_api_version:
    type: string
    default: 3
  os_interface:
    type: string
    default: public
  os_project_id:
    type: string
    default: 2344cddf33a1412b846290a9fb90b762
  os_password:
    type: string
    hidden: true
  os_storage_url:
    type: string
  os_auth_token:
    type: string
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: "Ubuntu 16.04 LTS (Xenial Xerus) - latest"
  flavor: 
    type: string
    label: Flavor
    description: The flavor to be used
    default: "ACCHT18.normal"
  key:
    type: string
    label: Key name
    description: Name of key-pair
    default: 2svni7746
  public_network:
    type: string
    label: Public network name or ID
    description: Public for floating ips
    default: "Public External IPv4 network"

resources:
  cluster_sg:
    type: OS::Neutron::SecurityGroup
    properties: 
      name: svni_cluster_sg
      description: SSH
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 5000
          port_range_max: 5000
  
# IPs
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: master_port }

# Routers
  router: 
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnetwork }

#Ports
  master_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
      - { get_resource: cluster_sg }

# Networks
  private_network:
    type: OS::Neutron::Net
  private_subnetwork:
    type: OS::Neutron::Subnet
    properties:
      cidr: 10.10.10.0/24
      dns_nameservers: [130.238.164.6, 130.238.4.133, 130.238.7.10, 130.239.1.90,
        129.16.1.53]
      network_id: { get_resource: private_network }

# Servers
  master_server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks: 
      - port: { get_resource: master_port }
      user_data_format: RAW
      user_data: 
        str_replace: 
          params:
            $os_auth_url: { get_param: os_auth_url }
            $os_username: { get_param: os_username }
            $os_password: { get_param: os_password }
            $os_storage_url: { get_param: os_storage_url }
            $os_auth_token: { get_param: os_auth_token }
            $os_project_id: { get_param: os_project_id }
            $os_project_name: { get_param: os_project_name }
            $os_interface: { get_param: os_interface }
            $os_region_name: { get_param: os_region_name }
            $os_identity_api_version: { get_param: os_identity_api_version }
            $os_user_domain_name: { get_param: os_user_domain_name }
          template: |
            #cloud-config

            package_update: true
            package_upgrade: true

            packages:
                - python-pip
                - rabbitmq-server
                - git

            write_files:
              - content: |
                  export OS_AUTH_URL=$os_auth_url
                  export OS_USERNAME=$os_username
                  export OS_PASSWORD=$os_password
                  export OS_STORAGE_URL=$os_storage_url
                  export OS_AUTH_TOKEN=$os_auth_token
                  export OS_PROJECT_ID=$os_project_id
                  export OS_PROJECT_NAME=$os_project_name
                  export OS_INTERFACE=$os_interface
                  export OS_REGION_NAME=$os_region_name
                  export OS_IDENTITY_API_VERSION=$os_identity_api_version
                  export OS_USER_DOMAIN_NAME=$os_user_domain_name
                path: /home/ubuntu/authcreds.sh

            runcmd:
                - '. /home/ubuntu/authcreds.sh'
                - 'pip install python-keystoneclient'
                - 'pip install python-swiftclient'
                - 'pip install celery'
                - 'pip install flask'
                - 'cd /home/ubuntu'
                - 'git clone "https://github.com/xscanpix/acc-a3.git"'
                - 'cd /home/ubuntu'
                - 'swift download svni7746-c3 -p data/0'
                - 'cd /home/ubuntu/acc-a3/messaging'
                - 'celery worker -A tasks.celery --loglevel=info &'
                - 'flask run --host=0.0.0.0 &'

outputs:
  os_auth_token:
    description: The os_auth_token
    value: { get_param: os_auth_token }
  os_storage_url:
    description: The os_storage_url
    value: { get_param: os_auth_token }

